{"version":3,"sources":["../../src/users/user.model.js"],"names":["userSchema","mongoose","Schema","userId","type","String","unique","required","email","password","timestamps","statics","findByLogin","login","findOne","username","user","pre","next","model","deleteMany","_id","hashPassword","bcrypt","genSalt","salt","hash","Error","comparePasswords","inputPassword","hashedPassword","compare","User"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CACjB;AACEC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,MAAM,EAAE,IAFF;AAGNC,IAAAA,QAAQ,EAAE;AAHJ,GADV;AAMEC,EAAAA,KAAK,EAAE;AACLJ,IAAAA,IAAI,EAAEC,MADD;AAELE,IAAAA,QAAQ,EAAE,IAFL;AAGLD,IAAAA,MAAM,EAAE;AAHH,GANT;AAWEG,EAAAA,QAAQ,EAAE;AAAEL,IAAAA,IAAI,EAAEC,MAAR;AAAgBE,IAAAA,QAAQ,EAAE;AAA1B;AAXZ,CADiB,EAcjB;AAAEG,EAAAA,UAAU,EAAE;AAAd,CAdiB,CAAnB;;AAiBAV,UAAU,CAACW,OAAX,CAAmBC,WAAnB;AAAA,qEAAiC,iBAAgBC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACd,KAAKC,OAAL,CAAa;AAC5BC,cAAAA,QAAQ,EAAEF;AADkB,aAAb,CADc;;AAAA;AAC3BG,YAAAA,IAD2B;;AAAA,gBAK1BA,IAL0B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMhB,KAAKF,OAAL,CAAa;AAAEN,cAAAA,KAAK,EAAEK;AAAT,aAAb,CANgB;;AAAA;AAM7BG,YAAAA,IAN6B;;AAAA;AAAA,6CASxBA,IATwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC;;AAAA;AAAA;AAAA;AAAA;;AAYAhB,UAAU,CAACiB,GAAX,CAAe,QAAf,EAAyB,UAAUC,IAAV,EAAgB;AACvC,OAAKC,KAAL,CAAW,SAAX,EAAsBC,UAAtB,CAAiC;AAAEJ,IAAAA,IAAI,EAAE,KAAKK;AAAb,GAAjC,EAAqDH,IAArD;AACD,CAFD;;AAIAlB,UAAU,CAACW,OAAX,CAAmBW,YAAnB;AAAA,sEAAkC,kBAAOb,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEXc,qBAAOC,OAAP,CAAe,EAAf,CAFW;;AAAA;AAExBC,YAAAA,IAFwB;AAAA;AAAA,mBAGjBF,qBAAOG,IAAP,CAAYjB,QAAZ,EAAsBgB,IAAtB,CAHiB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAKxB,IAAIE,KAAJ,CAAU,gBAAV,eALwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAAA;AAAA;AAAA;AAAA;;AASA3B,UAAU,CAACW,OAAX,CAAmBiB,gBAAnB;AAAA,sEAAsC,kBAAOC,aAAP,EAAsBC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAErBP,qBAAOQ,OAAP,CAAeF,aAAf,EAA8BC,cAA9B,CAFqB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAI5B,IAAIH,KAAJ,CAAU,mBAAV,eAJ4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA;;AAQA,IAAMK,IAAI,GAAG/B,qBAASkB,KAAT,CAAe,MAAf,EAAuBnB,UAAvB,CAAb;;eAEegC,I","sourcesContent":["import mongoose from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\n\nconst userSchema = new mongoose.Schema(\n  {\n    userId: {\n      type: String,\n      unique: true,\n      required: true,\n    },\n    email: {\n      type: String,\n      required: true,\n      unique: true,\n    },\n    password: { type: String, required: true },\n  },\n  { timestamps: true }\n);\n\nuserSchema.statics.findByLogin = async function (login) {\n  let user = await this.findOne({\n    username: login,\n  });\n\n  if (!user) {\n    user = await this.findOne({ email: login });\n  }\n\n  return user;\n};\n\nuserSchema.pre(\"remove\", function (next) {\n  this.model(\"Message\").deleteMany({ user: this._id }, next);\n});\n\nuserSchema.statics.hashPassword = async (password) => {\n  try {\n    const salt = await bcrypt.genSalt(10); // 10 rounds\n    return await bcrypt.hash(password, salt);\n  } catch (error) {\n    throw new Error(\"Hashing failed\", error);\n  }\n};\n\nuserSchema.statics.comparePasswords = async (inputPassword, hashedPassword) => {\n  try {\n    return await bcrypt.compare(inputPassword, hashedPassword);\n  } catch (error) {\n    throw new Error(\"Comparison failed\", error);\n  }\n};\n\nconst User = mongoose.model(\"User\", userSchema);\n\nexport default User;\n"],"file":"user.model.js"}