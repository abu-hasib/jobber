{"version":3,"sources":["../../src/users/user.controller.js"],"names":["userSchema","Joi","object","keys","email","string","minDomainSegments","password","required","min","confirmPassword","valid","ref","exports","Signup","req","res","User","context","models","result","validate","body","error","console","log","message","json","status","findOne","value","user","hashPassword","hash","id","userId","newUser","save","success","Login","comparePasswords","isValid","send"],"mappings":"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","sourcesContent":["import Joi from \"joi\";\nimport { v4 as uuid } from \"uuid\";\n\n//Validate user schema\nconst userSchema = Joi.object().keys({\n  email: Joi.string().email({ minDomainSegments: 2 }),\n  password: Joi.string().required().min(4),\n  confirmPassword: Joi.string().valid(Joi.ref(\"password\")).required(),\n});\n\nexports.Signup = async (req, res) => {\n  const { User } = req.context.models;\n  try {\n    const result = userSchema.validate(req.body);\n    if (result.error) {\n      console.log(result.error.message);\n      return res.json({\n        error: true,\n        status: 400,\n        message: result.error.message,\n      });\n    }\n    //Check if the email has been already registered.\n    var user = await User.findOne({\n      email: result.value.email,\n    });\n    if (user) {\n      return res.json({\n        error: true,\n        message: \"Email is already in use\",\n      });\n    }\n    const hash = await User.hashPassword(result.value.password);\n    const id = uuid(); //Generate unique id for the user.\n    result.value.userId = id;\n    //redundant hence deletion from db\n    delete result.value.confirmPassword;\n    result.value.password = hash;\n\n    const newUser = new User(result.value);\n    await newUser.save();\n    return res.status(200).json({\n      success: true,\n      message: \"Registration Successful\",\n    });\n  } catch (error) {\n    console.error(\"signup-error\", error);\n    return res.status(500).json({\n      error: true,\n      message: \"Cannot Register\",\n    });\n  }\n};\n\nexports.Login = async (req, res) => {\n  const { User } = req.context.models;\n  try {\n    const { email, password } = req.body;\n    if (!email || !password) {\n      return res.status(400).json({\n        error: true,\n        message: \"Cannot authorize user.\",\n      });\n    }\n    //1. Find if any account with that email exists in DB\n    const user = await User.findOne({ email: email });\n    // NOT FOUND - Throw error\n    if (!user) {\n      return res.status(404).json({\n        error: true,\n        message: \"Account not found\",\n      });\n    }\n\n    //2. Verify the password is valid\n    const isValid = await User.comparePasswords(password, user.password);\n    if (!isValid) {\n      return res.status(400).json({\n        error: true,\n        message: \"Invalid credentials\",\n      });\n    }\n    await user.save();\n\n    //Success\n    return res.send({\n      success: true,\n      message: \"User logged in successfully\",\n    });\n  } catch (err) {\n    console.error(\"Login error\", err);\n    return res.status(500).json({\n      error: true,\n      message: \"Couldn't login. Please try again later.\",\n    });\n  }\n};\n\n\n"],"file":"user.controller.js"}